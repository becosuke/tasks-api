// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: message/task.proto

package task

import (
	fmt "fmt"
	math "math"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/becosuke/tasks-api/protogen/message/common"
	_ "github.com/mwitkow/go-proto-validators"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *Document) Validate() error {
	return nil
}
func (this *CreateRequest) Validate() error {
	if !(this.ListId > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("ListId", fmt.Errorf(`value '%v' must be greater than '0'`, this.ListId))
	}
	if this.Title == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Title", fmt.Errorf(`value '%v' must not be an empty string`, this.Title))
	}
	return nil
}
func (this *CreateResponse) Validate() error {
	if this.Document != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Document); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Document", err)
		}
	}
	return nil
}
func (this *UpdateRequest) Validate() error {
	if !(this.Id > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("Id", fmt.Errorf(`value '%v' must be greater than '0'`, this.Id))
	}
	if !(this.ListId > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("ListId", fmt.Errorf(`value '%v' must be greater than '0'`, this.ListId))
	}
	if this.Title == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Title", fmt.Errorf(`value '%v' must not be an empty string`, this.Title))
	}
	return nil
}
func (this *UpdateResponse) Validate() error {
	if this.Document != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Document); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Document", err)
		}
	}
	return nil
}
func (this *DeleteRequest) Validate() error {
	if !(this.Id > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("Id", fmt.Errorf(`value '%v' must be greater than '0'`, this.Id))
	}
	return nil
}
func (this *DeleteResponse) Validate() error {
	if this.Document != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Document); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Document", err)
		}
	}
	return nil
}
func (this *GetDocumentRequest) Validate() error {
	return nil
}
func (this *GetDocumentResponse) Validate() error {
	if this.Document != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Document); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Document", err)
		}
	}
	return nil
}
func (this *GetDocumentsRequest) Validate() error {
	return nil
}
func (this *GetDocumentsResponse) Validate() error {
	for _, item := range this.Documents {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Documents", err)
			}
		}
	}
	return nil
}
func (this *GetDocumentsAllRequest) Validate() error {
	if !(this.Limit < 100) {
		return github_com_mwitkow_go_proto_validators.FieldError("Limit", fmt.Errorf(`value '%v' must be less than '100'`, this.Limit))
	}
	return nil
}
func (this *GetDocumentsAllResponse) Validate() error {
	for _, item := range this.Documents {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Documents", err)
			}
		}
	}
	return nil
}
func (this *GetCountAllRequest) Validate() error {
	return nil
}
func (this *GetCountAllResponse) Validate() error {
	if this.Count != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Count); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Count", err)
		}
	}
	return nil
}
func (this *GetDocumentsByListRequest) Validate() error {
	if !(this.Limit < 100) {
		return github_com_mwitkow_go_proto_validators.FieldError("Limit", fmt.Errorf(`value '%v' must be less than '100'`, this.Limit))
	}
	return nil
}
func (this *GetDocumentsByListResponse) Validate() error {
	for _, item := range this.Documents {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Documents", err)
			}
		}
	}
	return nil
}
func (this *GetCountByListRequest) Validate() error {
	return nil
}
func (this *GetCountByListResponse) Validate() error {
	if this.Count != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Count); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Count", err)
		}
	}
	return nil
}
func (this *GetDocumentsByListAndContextsRequest) Validate() error {
	if !(this.Limit < 100) {
		return github_com_mwitkow_go_proto_validators.FieldError("Limit", fmt.Errorf(`value '%v' must be less than '100'`, this.Limit))
	}
	return nil
}
func (this *GetDocumentsByListAndContextsResponse) Validate() error {
	for _, item := range this.Documents {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Documents", err)
			}
		}
	}
	return nil
}
func (this *GetCountByListAndContextsRequest) Validate() error {
	return nil
}
func (this *GetCountByListAndContextsResponse) Validate() error {
	if this.Count != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Count); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Count", err)
		}
	}
	return nil
}
