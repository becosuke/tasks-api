// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service/context.proto

package context

import (
	context "context"
	fmt "fmt"
	context1 "github.com/becosuke/tasks-api/protogen/message/context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("service/context.proto", fileDescriptor_cdb8e5df28c3c21c) }

var fileDescriptor_cdb8e5df28c3c21c = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0xd3, 0xdf, 0x4a, 0xf3, 0x30,
	0x18, 0x06, 0x70, 0xf6, 0x1d, 0xf4, 0x83, 0xec, 0x83, 0x8d, 0xc0, 0xc6, 0xe8, 0x3e, 0x27, 0x6c,
	0x8a, 0x32, 0xb0, 0x41, 0x05, 0x11, 0xcf, 0xe6, 0x06, 0x9e, 0x0b, 0x9e, 0x78, 0x96, 0x75, 0xaf,
	0xb5, 0x2c, 0x4b, 0x6a, 0xdf, 0x74, 0x0c, 0x64, 0x22, 0xde, 0x82, 0x77, 0xe1, 0xed, 0x78, 0x0b,
	0x5e, 0x88, 0xb4, 0x4d, 0xb0, 0xee, 0x4f, 0x77, 0x9a, 0xe7, 0xc9, 0xfb, 0x0b, 0x2f, 0x84, 0x34,
	0x10, 0xe2, 0x79, 0xe8, 0x03, 0xf3, 0x95, 0xd4, 0xb0, 0xd0, 0x5e, 0x14, 0x2b, 0xad, 0x68, 0xcd,
	0x1c, 0x7b, 0xe6, 0xd8, 0xfd, 0x1f, 0x28, 0x15, 0x08, 0x60, 0x3c, 0x0a, 0x19, 0x97, 0x52, 0x69,
	0xae, 0x43, 0x25, 0x31, 0xaf, 0xbb, 0x8d, 0x19, 0x20, 0xf2, 0x60, 0x65, 0xca, 0xd9, 0x87, 0x43,
	0xfe, 0x9a, 0x13, 0xca, 0x89, 0x33, 0x8c, 0x81, 0x6b, 0xa0, 0x1d, 0xcf, 0xb4, 0xed, 0x70, 0x2f,
	0x0f, 0x6e, 0xe1, 0x29, 0x01, 0xd4, 0xee, 0xfe, 0xd6, 0x1c, 0x23, 0x25, 0x11, 0xba, 0xcd, 0xb7,
	0xcf, 0xaf, 0xf7, 0x3f, 0xf5, 0x6e, 0x95, 0xcd, 0x4f, 0xad, 0x78, 0x55, 0xe9, 0xd3, 0x07, 0xe2,
	0xdc, 0x45, 0x93, 0xcd, 0x44, 0x1e, 0x6c, 0x27, 0x6c, 0x6e, 0x88, 0x76, 0x46, 0x34, 0xdc, 0x7a,
	0x81, 0x60, 0xcf, 0xe1, 0x64, 0x99, 0x3a, 0x3e, 0x71, 0x46, 0x20, 0x60, 0xa3, 0x93, 0x07, 0xdb,
	0x1d, 0x9b, 0x1b, 0xa7, 0x95, 0x39, 0xb4, 0xbf, 0xe6, 0xd0, 0x98, 0x54, 0x6f, 0x40, 0x8f, 0x94,
	0x9f, 0xcc, 0x40, 0x6a, 0xda, 0x5b, 0x9b, 0x54, 0x48, 0x2d, 0x77, 0x50, 0x5e, 0xfa, 0x6d, 0xd2,
	0x75, 0xf3, 0xb5, 0x42, 0xfe, 0x15, 0x6e, 0x20, 0x2d, 0x1d, 0x88, 0x96, 0x3d, 0xdc, 0xd1, 0x32,
	0x6e, 0x2f, 0x73, 0xf7, 0x68, 0xbb, 0xe0, 0x22, 0x9b, 0x98, 0x5e, 0xfa, 0x02, 0x5c, 0xd2, 0x17,
	0x52, 0x2b, 0x5e, 0x1e, 0x08, 0x41, 0x8f, 0x4a, 0xc7, 0x0f, 0x84, 0xb0, 0xef, 0x38, 0xde, 0x5d,
	0x2c, 0x59, 0x01, 0x32, 0x2e, 0x04, 0x5d, 0x64, 0x6b, 0x1f, 0xaa, 0x44, 0xea, 0xd4, 0xde, 0xb8,
	0x76, 0x9b, 0x96, 0xae, 0xfd, 0xa7, 0x64, 0xcc, 0x4e, 0x66, 0xb6, 0x68, 0x73, 0xd5, 0x64, 0x7e,
	0x5a, 0xbd, 0xbe, 0xbc, 0xbf, 0x08, 0x42, 0xfd, 0x98, 0x8c, 0x3d, 0x5f, 0xcd, 0xd8, 0x18, 0x7c,
	0x85, 0xc9, 0x14, 0x98, 0xe6, 0x38, 0xc5, 0x93, 0xf4, 0xdb, 0x65, 0x7f, 0x2a, 0x00, 0xc9, 0x56,
	0xbe, 0xec, 0xd8, 0xc9, 0x92, 0xf3, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6e, 0xb4, 0xfa, 0xb8,
	0xcc, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ContextClient is the client API for Context service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ContextClient interface {
	Create(ctx context.Context, in *context1.CreateRequest, opts ...grpc.CallOption) (*context1.CreateResponse, error)
	Update(ctx context.Context, in *context1.UpdateRequest, opts ...grpc.CallOption) (*context1.UpdateResponse, error)
	Delete(ctx context.Context, in *context1.DeleteRequest, opts ...grpc.CallOption) (*context1.DeleteResponse, error)
	GetDocument(ctx context.Context, in *context1.GetDocumentRequest, opts ...grpc.CallOption) (*context1.GetDocumentResponse, error)
	GetDocuments(ctx context.Context, in *context1.GetDocumentsRequest, opts ...grpc.CallOption) (*context1.GetDocumentsResponse, error)
	GetDocumentsAll(ctx context.Context, in *context1.GetDocumentsAllRequest, opts ...grpc.CallOption) (*context1.GetDocumentsAllResponse, error)
	GetCountAll(ctx context.Context, in *context1.GetCountAllRequest, opts ...grpc.CallOption) (*context1.GetCountAllResponse, error)
}

type contextClient struct {
	cc *grpc.ClientConn
}

func NewContextClient(cc *grpc.ClientConn) ContextClient {
	return &contextClient{cc}
}

func (c *contextClient) Create(ctx context.Context, in *context1.CreateRequest, opts ...grpc.CallOption) (*context1.CreateResponse, error) {
	out := new(context1.CreateResponse)
	err := c.cc.Invoke(ctx, "/service.context.context/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextClient) Update(ctx context.Context, in *context1.UpdateRequest, opts ...grpc.CallOption) (*context1.UpdateResponse, error) {
	out := new(context1.UpdateResponse)
	err := c.cc.Invoke(ctx, "/service.context.context/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextClient) Delete(ctx context.Context, in *context1.DeleteRequest, opts ...grpc.CallOption) (*context1.DeleteResponse, error) {
	out := new(context1.DeleteResponse)
	err := c.cc.Invoke(ctx, "/service.context.context/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextClient) GetDocument(ctx context.Context, in *context1.GetDocumentRequest, opts ...grpc.CallOption) (*context1.GetDocumentResponse, error) {
	out := new(context1.GetDocumentResponse)
	err := c.cc.Invoke(ctx, "/service.context.context/GetDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextClient) GetDocuments(ctx context.Context, in *context1.GetDocumentsRequest, opts ...grpc.CallOption) (*context1.GetDocumentsResponse, error) {
	out := new(context1.GetDocumentsResponse)
	err := c.cc.Invoke(ctx, "/service.context.context/GetDocuments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextClient) GetDocumentsAll(ctx context.Context, in *context1.GetDocumentsAllRequest, opts ...grpc.CallOption) (*context1.GetDocumentsAllResponse, error) {
	out := new(context1.GetDocumentsAllResponse)
	err := c.cc.Invoke(ctx, "/service.context.context/GetDocumentsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextClient) GetCountAll(ctx context.Context, in *context1.GetCountAllRequest, opts ...grpc.CallOption) (*context1.GetCountAllResponse, error) {
	out := new(context1.GetCountAllResponse)
	err := c.cc.Invoke(ctx, "/service.context.context/GetCountAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContextServer is the server API for Context service.
type ContextServer interface {
	Create(context.Context, *context1.CreateRequest) (*context1.CreateResponse, error)
	Update(context.Context, *context1.UpdateRequest) (*context1.UpdateResponse, error)
	Delete(context.Context, *context1.DeleteRequest) (*context1.DeleteResponse, error)
	GetDocument(context.Context, *context1.GetDocumentRequest) (*context1.GetDocumentResponse, error)
	GetDocuments(context.Context, *context1.GetDocumentsRequest) (*context1.GetDocumentsResponse, error)
	GetDocumentsAll(context.Context, *context1.GetDocumentsAllRequest) (*context1.GetDocumentsAllResponse, error)
	GetCountAll(context.Context, *context1.GetCountAllRequest) (*context1.GetCountAllResponse, error)
}

// UnimplementedContextServer can be embedded to have forward compatible implementations.
type UnimplementedContextServer struct {
}

func (*UnimplementedContextServer) Create(ctx context.Context, req *context1.CreateRequest) (*context1.CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedContextServer) Update(ctx context.Context, req *context1.UpdateRequest) (*context1.UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedContextServer) Delete(ctx context.Context, req *context1.DeleteRequest) (*context1.DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedContextServer) GetDocument(ctx context.Context, req *context1.GetDocumentRequest) (*context1.GetDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}
func (*UnimplementedContextServer) GetDocuments(ctx context.Context, req *context1.GetDocumentsRequest) (*context1.GetDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocuments not implemented")
}
func (*UnimplementedContextServer) GetDocumentsAll(ctx context.Context, req *context1.GetDocumentsAllRequest) (*context1.GetDocumentsAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentsAll not implemented")
}
func (*UnimplementedContextServer) GetCountAll(ctx context.Context, req *context1.GetCountAllRequest) (*context1.GetCountAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountAll not implemented")
}

func RegisterContextServer(s *grpc.Server, srv ContextServer) {
	s.RegisterService(&_Context_serviceDesc, srv)
}

func _Context_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(context1.CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.context.context/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServer).Create(ctx, req.(*context1.CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Context_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(context1.UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.context.context/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServer).Update(ctx, req.(*context1.UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Context_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(context1.DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.context.context/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServer).Delete(ctx, req.(*context1.DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Context_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(context1.GetDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.context.context/GetDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServer).GetDocument(ctx, req.(*context1.GetDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Context_GetDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(context1.GetDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServer).GetDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.context.context/GetDocuments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServer).GetDocuments(ctx, req.(*context1.GetDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Context_GetDocumentsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(context1.GetDocumentsAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServer).GetDocumentsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.context.context/GetDocumentsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServer).GetDocumentsAll(ctx, req.(*context1.GetDocumentsAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Context_GetCountAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(context1.GetCountAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServer).GetCountAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.context.context/GetCountAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServer).GetCountAll(ctx, req.(*context1.GetCountAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Context_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.context.context",
	HandlerType: (*ContextServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Context_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Context_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Context_Delete_Handler,
		},
		{
			MethodName: "GetDocument",
			Handler:    _Context_GetDocument_Handler,
		},
		{
			MethodName: "GetDocuments",
			Handler:    _Context_GetDocuments_Handler,
		},
		{
			MethodName: "GetDocumentsAll",
			Handler:    _Context_GetDocumentsAll_Handler,
		},
		{
			MethodName: "GetCountAll",
			Handler:    _Context_GetCountAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/context.proto",
}
