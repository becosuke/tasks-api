// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service/task.proto

package task

import (
	context "context"
	fmt "fmt"
	task "github.com/becosuke/tasks-api/protogen/message/task"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("service/task.proto", fileDescriptor_dc6b3543d5c33d99) }

var fileDescriptor_dc6b3543d5c33d99 = []byte{
	// 512 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xdf, 0x6a, 0x13, 0x41,
	0x14, 0xc6, 0x59, 0x91, 0x20, 0x63, 0x6b, 0xe1, 0x94, 0x42, 0xdd, 0x56, 0x89, 0xb1, 0xfe, 0xa1,
	0xe0, 0x0e, 0x6d, 0x28, 0x05, 0xc1, 0x8b, 0x34, 0x05, 0x6f, 0xbc, 0x12, 0x05, 0x29, 0x48, 0xd9,
	0x6c, 0x0e, 0xeb, 0x92, 0xc9, 0x4c, 0xcc, 0x99, 0xad, 0x4a, 0xe8, 0x8d, 0x5e, 0x79, 0xed, 0xe3,
	0x78, 0xe5, 0x33, 0xf8, 0x0a, 0xbe, 0x85, 0x37, 0xb2, 0xb3, 0x33, 0xb8, 0x6b, 0x76, 0x36, 0xf6,
	0x26, 0x84, 0x73, 0xbe, 0xf9, 0x7e, 0xdf, 0x39, 0xb3, 0x0c, 0x03, 0xc2, 0xf9, 0x45, 0x96, 0x20,
	0xd7, 0x31, 0x4d, 0xa2, 0xd9, 0x5c, 0x69, 0x05, 0x6b, 0xb6, 0x16, 0x15, 0xb5, 0x70, 0x37, 0x55,
	0x2a, 0x15, 0xc8, 0xe3, 0x59, 0xc6, 0x63, 0x29, 0x95, 0x8e, 0x75, 0xa6, 0x24, 0x95, 0xda, 0x10,
	0xa6, 0x48, 0x14, 0xa7, 0xd5, 0xf3, 0x87, 0xbf, 0x19, 0xbb, 0xfe, 0x2a, 0xa6, 0x09, 0xbc, 0x61,
	0x9d, 0xe1, 0x1c, 0x63, 0x8d, 0xb0, 0x13, 0x59, 0x9d, 0xf1, 0x8c, 0xca, 0xea, 0x4b, 0x7c, 0x9f,
	0x23, 0xe9, 0x70, 0xb7, 0xb9, 0x49, 0x33, 0x25, 0x09, 0x7b, 0x9b, 0x9f, 0x7f, 0xfe, 0xfa, 0x76,
	0x6d, 0xbd, 0x77, 0x83, 0x5f, 0x1c, 0x18, 0xca, 0xd3, 0x60, 0x1f, 0xde, 0xb2, 0xce, 0xeb, 0xd9,
	0xb8, 0xc1, 0xb9, 0xac, 0x7a, 0x9c, 0x5d, 0xd3, 0x3a, 0x6f, 0x1b, 0x67, 0x08, 0xd7, 0x9d, 0x33,
	0x5f, 0x64, 0xe3, 0xcb, 0xc2, 0xfe, 0x8c, 0x75, 0x4e, 0x51, 0xe0, 0xb2, 0x7d, 0x59, 0xf5, 0xd8,
	0xbb, 0xa6, 0xb5, 0xdf, 0x32, 0xf6, 0x1b, 0xfb, 0x75, 0x7b, 0xc8, 0xd8, 0xcd, 0xe7, 0xa8, 0x4f,
	0x55, 0x92, 0x4f, 0x51, 0x6a, 0xe8, 0xd6, 0x3d, 0x2a, 0x2d, 0x47, 0xb9, 0xd7, 0xa2, 0xa8, 0xa3,
	0xe0, 0x1f, 0xd4, 0x07, 0xb6, 0x56, 0x51, 0x13, 0xf8, 0x9d, 0xc8, 0xc1, 0x7a, 0x6d, 0x12, 0x4b,
	0xeb, 0x1a, 0x5a, 0x08, 0xdb, 0x8e, 0x46, 0x7c, 0x6c, 0x45, 0x05, 0x97, 0x2e, 0x21, 0x67, 0x1b,
	0xd5, 0x93, 0x03, 0x21, 0x60, 0xcf, 0x6f, 0x3c, 0x10, 0xc2, 0xe1, 0x1f, 0xac, 0x50, 0xf9, 0xe6,
	0x25, 0x1e, 0x0b, 0x01, 0xca, 0xac, 0x76, 0xa8, 0x72, 0xa9, 0x0b, 0xe4, 0xf2, 0x6a, 0x5d, 0xcb,
	0xbf, 0xda, 0xbf, 0x0a, 0x8b, 0xda, 0x31, 0xa8, 0x2d, 0xd8, 0xac, 0xa1, 0x78, 0x52, 0xe8, 0xe0,
	0x6b, 0xc0, 0xa0, 0x9a, 0xf1, 0xe4, 0xd3, 0x8b, 0x8c, 0x34, 0x3c, 0xf2, 0x4f, 0x51, 0x2a, 0x1c,
	0xff, 0xf1, 0x6a, 0xa1, 0x7f, 0xe7, 0x22, 0x23, 0xcd, 0x17, 0xc5, 0xef, 0x79, 0x71, 0xd9, 0x5f,
	0x02, 0x76, 0xcb, 0x0d, 0x60, 0x73, 0xdc, 0x6f, 0x1e, 0xaf, 0x9e, 0x61, 0xaf, 0x5d, 0x64, 0xf9,
	0x0f, 0x0d, 0xbf, 0x0b, 0x77, 0x7d, 0x7c, 0xbb, 0x91, 0x1f, 0x01, 0xbb, 0xb3, 0x3c, 0xc6, 0x40,
	0x8e, 0x87, 0x4a, 0x6a, 0xfc, 0xa8, 0x09, 0x0e, 0x57, 0xcd, 0x5c, 0x11, 0xbb, 0x8c, 0xfd, 0x2b,
	0x9d, 0xb1, 0x91, 0x8f, 0x4d, 0xe4, 0x03, 0xe0, 0x2d, 0x91, 0xcb, 0x23, 0x7c, 0x61, 0xff, 0x9d,
	0x9b, 0xaf, 0xf7, 0x7b, 0xc0, 0x6e, 0xd7, 0xd7, 0x50, 0xcd, 0x1f, 0xb5, 0xed, 0xab, 0x21, 0x3b,
	0xff, 0x6f, 0xbd, 0xcd, 0xfd, 0xcc, 0xe4, 0x3e, 0x86, 0xa3, 0x2b, 0xe6, 0x2e, 0x6f, 0xe0, 0xe4,
	0xe8, 0xac, 0x9f, 0x66, 0xfa, 0x5d, 0x3e, 0x8a, 0x12, 0x35, 0xe5, 0x23, 0x4c, 0x14, 0xe5, 0x93,
	0xf2, 0x7d, 0xa6, 0x27, 0xc5, 0x23, 0x6e, 0x1e, 0xe9, 0x14, 0x25, 0xaf, 0x3e, 0xfd, 0xa3, 0x8e,
	0x29, 0xf7, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x63, 0x6a, 0x97, 0x8c, 0x11, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TaskClient is the client API for Task service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaskClient interface {
	Create(ctx context.Context, in *task.CreateRequest, opts ...grpc.CallOption) (*task.CreateResponse, error)
	Update(ctx context.Context, in *task.UpdateRequest, opts ...grpc.CallOption) (*task.UpdateResponse, error)
	Delete(ctx context.Context, in *task.DeleteRequest, opts ...grpc.CallOption) (*task.DeleteResponse, error)
	GetDocument(ctx context.Context, in *task.GetDocumentRequest, opts ...grpc.CallOption) (*task.GetDocumentResponse, error)
	GetDocuments(ctx context.Context, in *task.GetDocumentsRequest, opts ...grpc.CallOption) (*task.GetDocumentsResponse, error)
	GetDocumentsAll(ctx context.Context, in *task.GetDocumentsAllRequest, opts ...grpc.CallOption) (*task.GetDocumentsAllResponse, error)
	GetCountAll(ctx context.Context, in *task.GetCountAllRequest, opts ...grpc.CallOption) (*task.GetCountAllResponse, error)
	GetDocumentsByList(ctx context.Context, in *task.GetDocumentsByListRequest, opts ...grpc.CallOption) (*task.GetDocumentsByListResponse, error)
	GetCountByList(ctx context.Context, in *task.GetCountByListRequest, opts ...grpc.CallOption) (*task.GetCountByListResponse, error)
	GetDocumentsByListAndContexts(ctx context.Context, in *task.GetDocumentsByListAndContextsRequest, opts ...grpc.CallOption) (*task.GetDocumentsByListAndContextsResponse, error)
	GetCountByListAndContexts(ctx context.Context, in *task.GetCountByListAndContextsRequest, opts ...grpc.CallOption) (*task.GetCountByListAndContextsResponse, error)
}

type taskClient struct {
	cc *grpc.ClientConn
}

func NewTaskClient(cc *grpc.ClientConn) TaskClient {
	return &taskClient{cc}
}

func (c *taskClient) Create(ctx context.Context, in *task.CreateRequest, opts ...grpc.CallOption) (*task.CreateResponse, error) {
	out := new(task.CreateResponse)
	err := c.cc.Invoke(ctx, "/service.task.Task/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) Update(ctx context.Context, in *task.UpdateRequest, opts ...grpc.CallOption) (*task.UpdateResponse, error) {
	out := new(task.UpdateResponse)
	err := c.cc.Invoke(ctx, "/service.task.Task/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) Delete(ctx context.Context, in *task.DeleteRequest, opts ...grpc.CallOption) (*task.DeleteResponse, error) {
	out := new(task.DeleteResponse)
	err := c.cc.Invoke(ctx, "/service.task.Task/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetDocument(ctx context.Context, in *task.GetDocumentRequest, opts ...grpc.CallOption) (*task.GetDocumentResponse, error) {
	out := new(task.GetDocumentResponse)
	err := c.cc.Invoke(ctx, "/service.task.Task/GetDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetDocuments(ctx context.Context, in *task.GetDocumentsRequest, opts ...grpc.CallOption) (*task.GetDocumentsResponse, error) {
	out := new(task.GetDocumentsResponse)
	err := c.cc.Invoke(ctx, "/service.task.Task/GetDocuments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetDocumentsAll(ctx context.Context, in *task.GetDocumentsAllRequest, opts ...grpc.CallOption) (*task.GetDocumentsAllResponse, error) {
	out := new(task.GetDocumentsAllResponse)
	err := c.cc.Invoke(ctx, "/service.task.Task/GetDocumentsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetCountAll(ctx context.Context, in *task.GetCountAllRequest, opts ...grpc.CallOption) (*task.GetCountAllResponse, error) {
	out := new(task.GetCountAllResponse)
	err := c.cc.Invoke(ctx, "/service.task.Task/GetCountAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetDocumentsByList(ctx context.Context, in *task.GetDocumentsByListRequest, opts ...grpc.CallOption) (*task.GetDocumentsByListResponse, error) {
	out := new(task.GetDocumentsByListResponse)
	err := c.cc.Invoke(ctx, "/service.task.Task/GetDocumentsByList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetCountByList(ctx context.Context, in *task.GetCountByListRequest, opts ...grpc.CallOption) (*task.GetCountByListResponse, error) {
	out := new(task.GetCountByListResponse)
	err := c.cc.Invoke(ctx, "/service.task.Task/GetCountByList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetDocumentsByListAndContexts(ctx context.Context, in *task.GetDocumentsByListAndContextsRequest, opts ...grpc.CallOption) (*task.GetDocumentsByListAndContextsResponse, error) {
	out := new(task.GetDocumentsByListAndContextsResponse)
	err := c.cc.Invoke(ctx, "/service.task.Task/GetDocumentsByListAndContexts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetCountByListAndContexts(ctx context.Context, in *task.GetCountByListAndContextsRequest, opts ...grpc.CallOption) (*task.GetCountByListAndContextsResponse, error) {
	out := new(task.GetCountByListAndContextsResponse)
	err := c.cc.Invoke(ctx, "/service.task.Task/GetCountByListAndContexts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServer is the server API for Task service.
type TaskServer interface {
	Create(context.Context, *task.CreateRequest) (*task.CreateResponse, error)
	Update(context.Context, *task.UpdateRequest) (*task.UpdateResponse, error)
	Delete(context.Context, *task.DeleteRequest) (*task.DeleteResponse, error)
	GetDocument(context.Context, *task.GetDocumentRequest) (*task.GetDocumentResponse, error)
	GetDocuments(context.Context, *task.GetDocumentsRequest) (*task.GetDocumentsResponse, error)
	GetDocumentsAll(context.Context, *task.GetDocumentsAllRequest) (*task.GetDocumentsAllResponse, error)
	GetCountAll(context.Context, *task.GetCountAllRequest) (*task.GetCountAllResponse, error)
	GetDocumentsByList(context.Context, *task.GetDocumentsByListRequest) (*task.GetDocumentsByListResponse, error)
	GetCountByList(context.Context, *task.GetCountByListRequest) (*task.GetCountByListResponse, error)
	GetDocumentsByListAndContexts(context.Context, *task.GetDocumentsByListAndContextsRequest) (*task.GetDocumentsByListAndContextsResponse, error)
	GetCountByListAndContexts(context.Context, *task.GetCountByListAndContextsRequest) (*task.GetCountByListAndContextsResponse, error)
}

// UnimplementedTaskServer can be embedded to have forward compatible implementations.
type UnimplementedTaskServer struct {
}

func (*UnimplementedTaskServer) Create(ctx context.Context, req *task.CreateRequest) (*task.CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedTaskServer) Update(ctx context.Context, req *task.UpdateRequest) (*task.UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedTaskServer) Delete(ctx context.Context, req *task.DeleteRequest) (*task.DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedTaskServer) GetDocument(ctx context.Context, req *task.GetDocumentRequest) (*task.GetDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}
func (*UnimplementedTaskServer) GetDocuments(ctx context.Context, req *task.GetDocumentsRequest) (*task.GetDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocuments not implemented")
}
func (*UnimplementedTaskServer) GetDocumentsAll(ctx context.Context, req *task.GetDocumentsAllRequest) (*task.GetDocumentsAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentsAll not implemented")
}
func (*UnimplementedTaskServer) GetCountAll(ctx context.Context, req *task.GetCountAllRequest) (*task.GetCountAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountAll not implemented")
}
func (*UnimplementedTaskServer) GetDocumentsByList(ctx context.Context, req *task.GetDocumentsByListRequest) (*task.GetDocumentsByListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentsByList not implemented")
}
func (*UnimplementedTaskServer) GetCountByList(ctx context.Context, req *task.GetCountByListRequest) (*task.GetCountByListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountByList not implemented")
}
func (*UnimplementedTaskServer) GetDocumentsByListAndContexts(ctx context.Context, req *task.GetDocumentsByListAndContextsRequest) (*task.GetDocumentsByListAndContextsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentsByListAndContexts not implemented")
}
func (*UnimplementedTaskServer) GetCountByListAndContexts(ctx context.Context, req *task.GetCountByListAndContextsRequest) (*task.GetCountByListAndContextsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountByListAndContexts not implemented")
}

func RegisterTaskServer(s *grpc.Server, srv TaskServer) {
	s.RegisterService(&_Task_serviceDesc, srv)
}

func _Task_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(task.CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.task.Task/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).Create(ctx, req.(*task.CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(task.UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.task.Task/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).Update(ctx, req.(*task.UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(task.DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.task.Task/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).Delete(ctx, req.(*task.DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(task.GetDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.task.Task/GetDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetDocument(ctx, req.(*task.GetDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(task.GetDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.task.Task/GetDocuments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetDocuments(ctx, req.(*task.GetDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetDocumentsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(task.GetDocumentsAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetDocumentsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.task.Task/GetDocumentsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetDocumentsAll(ctx, req.(*task.GetDocumentsAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetCountAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(task.GetCountAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetCountAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.task.Task/GetCountAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetCountAll(ctx, req.(*task.GetCountAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetDocumentsByList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(task.GetDocumentsByListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetDocumentsByList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.task.Task/GetDocumentsByList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetDocumentsByList(ctx, req.(*task.GetDocumentsByListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetCountByList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(task.GetCountByListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetCountByList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.task.Task/GetCountByList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetCountByList(ctx, req.(*task.GetCountByListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetDocumentsByListAndContexts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(task.GetDocumentsByListAndContextsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetDocumentsByListAndContexts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.task.Task/GetDocumentsByListAndContexts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetDocumentsByListAndContexts(ctx, req.(*task.GetDocumentsByListAndContextsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetCountByListAndContexts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(task.GetCountByListAndContextsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetCountByListAndContexts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.task.Task/GetCountByListAndContexts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetCountByListAndContexts(ctx, req.(*task.GetCountByListAndContextsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Task_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.task.Task",
	HandlerType: (*TaskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Task_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Task_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Task_Delete_Handler,
		},
		{
			MethodName: "GetDocument",
			Handler:    _Task_GetDocument_Handler,
		},
		{
			MethodName: "GetDocuments",
			Handler:    _Task_GetDocuments_Handler,
		},
		{
			MethodName: "GetDocumentsAll",
			Handler:    _Task_GetDocumentsAll_Handler,
		},
		{
			MethodName: "GetCountAll",
			Handler:    _Task_GetCountAll_Handler,
		},
		{
			MethodName: "GetDocumentsByList",
			Handler:    _Task_GetDocumentsByList_Handler,
		},
		{
			MethodName: "GetCountByList",
			Handler:    _Task_GetCountByList_Handler,
		},
		{
			MethodName: "GetDocumentsByListAndContexts",
			Handler:    _Task_GetDocumentsByListAndContexts_Handler,
		},
		{
			MethodName: "GetCountByListAndContexts",
			Handler:    _Task_GetCountByListAndContexts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/task.proto",
}
