// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service/task.proto

package task // import "github.com/becosuke/tasks-api/protogen/service/task"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/becosuke/tasks-api/protogen/message/common"
import task "github.com/becosuke/tasks-api/protogen/message/task"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TaskClient is the client API for Task service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaskClient interface {
	Create(ctx context.Context, in *task.CreateRequest, opts ...grpc.CallOption) (*task.Document, error)
	Update(ctx context.Context, in *task.UpdateRequest, opts ...grpc.CallOption) (*task.Document, error)
	Delete(ctx context.Context, in *task.DeleteRequest, opts ...grpc.CallOption) (*task.Document, error)
	GetDocument(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*task.Document, error)
	GetDocuments(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (Task_GetDocumentsClient, error)
	GetDocumentsAll(ctx context.Context, in *common.Pagination, opts ...grpc.CallOption) (Task_GetDocumentsAllClient, error)
	GetCountAll(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*common.Count, error)
	GetDocumentsByList(ctx context.Context, in *common.IdPagination, opts ...grpc.CallOption) (Task_GetDocumentsByListClient, error)
	GetCountByList(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Count, error)
}

type taskClient struct {
	cc *grpc.ClientConn
}

func NewTaskClient(cc *grpc.ClientConn) TaskClient {
	return &taskClient{cc}
}

func (c *taskClient) Create(ctx context.Context, in *task.CreateRequest, opts ...grpc.CallOption) (*task.Document, error) {
	out := new(task.Document)
	err := c.cc.Invoke(ctx, "/service.task.Task/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) Update(ctx context.Context, in *task.UpdateRequest, opts ...grpc.CallOption) (*task.Document, error) {
	out := new(task.Document)
	err := c.cc.Invoke(ctx, "/service.task.Task/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) Delete(ctx context.Context, in *task.DeleteRequest, opts ...grpc.CallOption) (*task.Document, error) {
	out := new(task.Document)
	err := c.cc.Invoke(ctx, "/service.task.Task/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetDocument(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*task.Document, error) {
	out := new(task.Document)
	err := c.cc.Invoke(ctx, "/service.task.Task/GetDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetDocuments(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (Task_GetDocumentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Task_serviceDesc.Streams[0], "/service.task.Task/GetDocuments", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskGetDocumentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Task_GetDocumentsClient interface {
	Recv() (*task.Document, error)
	grpc.ClientStream
}

type taskGetDocumentsClient struct {
	grpc.ClientStream
}

func (x *taskGetDocumentsClient) Recv() (*task.Document, error) {
	m := new(task.Document)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *taskClient) GetDocumentsAll(ctx context.Context, in *common.Pagination, opts ...grpc.CallOption) (Task_GetDocumentsAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Task_serviceDesc.Streams[1], "/service.task.Task/GetDocumentsAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskGetDocumentsAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Task_GetDocumentsAllClient interface {
	Recv() (*task.Document, error)
	grpc.ClientStream
}

type taskGetDocumentsAllClient struct {
	grpc.ClientStream
}

func (x *taskGetDocumentsAllClient) Recv() (*task.Document, error) {
	m := new(task.Document)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *taskClient) GetCountAll(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*common.Count, error) {
	out := new(common.Count)
	err := c.cc.Invoke(ctx, "/service.task.Task/GetCountAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetDocumentsByList(ctx context.Context, in *common.IdPagination, opts ...grpc.CallOption) (Task_GetDocumentsByListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Task_serviceDesc.Streams[2], "/service.task.Task/GetDocumentsByList", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskGetDocumentsByListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Task_GetDocumentsByListClient interface {
	Recv() (*task.Document, error)
	grpc.ClientStream
}

type taskGetDocumentsByListClient struct {
	grpc.ClientStream
}

func (x *taskGetDocumentsByListClient) Recv() (*task.Document, error) {
	m := new(task.Document)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *taskClient) GetCountByList(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*common.Count, error) {
	out := new(common.Count)
	err := c.cc.Invoke(ctx, "/service.task.Task/GetCountByList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServer is the server API for Task service.
type TaskServer interface {
	Create(context.Context, *task.CreateRequest) (*task.Document, error)
	Update(context.Context, *task.UpdateRequest) (*task.Document, error)
	Delete(context.Context, *task.DeleteRequest) (*task.Document, error)
	GetDocument(context.Context, *common.Id) (*task.Document, error)
	GetDocuments(*common.Ids, Task_GetDocumentsServer) error
	GetDocumentsAll(*common.Pagination, Task_GetDocumentsAllServer) error
	GetCountAll(context.Context, *common.Empty) (*common.Count, error)
	GetDocumentsByList(*common.IdPagination, Task_GetDocumentsByListServer) error
	GetCountByList(context.Context, *common.Id) (*common.Count, error)
}

func RegisterTaskServer(s *grpc.Server, srv TaskServer) {
	s.RegisterService(&_Task_serviceDesc, srv)
}

func _Task_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(task.CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.task.Task/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).Create(ctx, req.(*task.CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(task.UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.task.Task/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).Update(ctx, req.(*task.UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(task.DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.task.Task/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).Delete(ctx, req.(*task.DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.task.Task/GetDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetDocument(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetDocuments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(common.Ids)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaskServer).GetDocuments(m, &taskGetDocumentsServer{stream})
}

type Task_GetDocumentsServer interface {
	Send(*task.Document) error
	grpc.ServerStream
}

type taskGetDocumentsServer struct {
	grpc.ServerStream
}

func (x *taskGetDocumentsServer) Send(m *task.Document) error {
	return x.ServerStream.SendMsg(m)
}

func _Task_GetDocumentsAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(common.Pagination)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaskServer).GetDocumentsAll(m, &taskGetDocumentsAllServer{stream})
}

type Task_GetDocumentsAllServer interface {
	Send(*task.Document) error
	grpc.ServerStream
}

type taskGetDocumentsAllServer struct {
	grpc.ServerStream
}

func (x *taskGetDocumentsAllServer) Send(m *task.Document) error {
	return x.ServerStream.SendMsg(m)
}

func _Task_GetCountAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetCountAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.task.Task/GetCountAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetCountAll(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetDocumentsByList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(common.IdPagination)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaskServer).GetDocumentsByList(m, &taskGetDocumentsByListServer{stream})
}

type Task_GetDocumentsByListServer interface {
	Send(*task.Document) error
	grpc.ServerStream
}

type taskGetDocumentsByListServer struct {
	grpc.ServerStream
}

func (x *taskGetDocumentsByListServer) Send(m *task.Document) error {
	return x.ServerStream.SendMsg(m)
}

func _Task_GetCountByList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetCountByList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.task.Task/GetCountByList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetCountByList(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _Task_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.task.Task",
	HandlerType: (*TaskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Task_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Task_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Task_Delete_Handler,
		},
		{
			MethodName: "GetDocument",
			Handler:    _Task_GetDocument_Handler,
		},
		{
			MethodName: "GetCountAll",
			Handler:    _Task_GetCountAll_Handler,
		},
		{
			MethodName: "GetCountByList",
			Handler:    _Task_GetCountByList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDocuments",
			Handler:       _Task_GetDocuments_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDocumentsAll",
			Handler:       _Task_GetDocumentsAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDocumentsByList",
			Handler:       _Task_GetDocumentsByList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service/task.proto",
}

func init() { proto.RegisterFile("service/task.proto", fileDescriptor_task_4b05f01ba3c3b595) }

var fileDescriptor_task_4b05f01ba3c3b595 = []byte{
	// 411 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xc1, 0xea, 0xd3, 0x40,
	0x10, 0xc6, 0xa9, 0x48, 0x90, 0xf5, 0xff, 0xb7, 0x30, 0xb5, 0x52, 0xb7, 0x3d, 0x68, 0x8f, 0x05,
	0xb3, 0xd5, 0xe2, 0xc5, 0x9b, 0x6d, 0x45, 0x04, 0x0f, 0xa5, 0x54, 0x14, 0x0f, 0xca, 0x36, 0x59,
	0xe2, 0xd2, 0x64, 0x37, 0x76, 0x36, 0x85, 0x22, 0xbd, 0xf8, 0x0a, 0x3e, 0x91, 0xcf, 0xe0, 0x2b,
	0xf8, 0x20, 0x92, 0xdd, 0x44, 0xd2, 0x26, 0xa5, 0xbd, 0x7e, 0x3b, 0xf3, 0xfb, 0x66, 0xbe, 0x64,
	0x08, 0xa0, 0xd8, 0xee, 0x64, 0x20, 0x98, 0xe1, 0xb8, 0xf1, 0xd3, 0xad, 0x36, 0x1a, 0x6e, 0x0a,
	0xcd, 0xcf, 0x35, 0x3a, 0x88, 0xb4, 0x8e, 0x62, 0xc1, 0x78, 0x2a, 0x19, 0x57, 0x4a, 0x1b, 0x6e,
	0xa4, 0x56, 0xe8, 0x6a, 0x29, 0x24, 0x02, 0x91, 0x47, 0xd5, 0x7e, 0xfa, 0xb0, 0xd4, 0x02, 0x9d,
	0x24, 0x5a, 0x39, 0xf5, 0xc5, 0x6f, 0x8f, 0xdc, 0x5d, 0x71, 0xdc, 0xc0, 0x92, 0x78, 0xb3, 0xad,
	0xe0, 0x46, 0x40, 0xdf, 0x2f, 0x2a, 0xad, 0x93, 0xef, 0xd4, 0xa5, 0xf8, 0x9e, 0x09, 0x34, 0xf4,
	0xd1, 0xf1, 0xe3, 0x5c, 0x07, 0x59, 0x22, 0x94, 0x19, 0x76, 0x7e, 0xfe, 0xf9, 0xfb, 0xeb, 0xce,
	0xed, 0xf0, 0x1e, 0xdb, 0x3d, 0xb7, 0xae, 0xaf, 0x5a, 0x23, 0xf8, 0x48, 0xbc, 0x0f, 0x69, 0xd8,
	0xc0, 0x74, 0xea, 0x25, 0x66, 0xcf, 0x32, 0x81, 0xde, 0x96, 0x4c, 0xf6, 0x43, 0x86, 0x87, 0x1c,
	0xbc, 0x22, 0xde, 0x5c, 0xc4, 0xa2, 0x0e, 0x76, 0xea, 0x25, 0x70, 0xd7, 0x82, 0xdb, 0xa3, 0x63,
	0x30, 0x2c, 0xc8, 0xfd, 0xb7, 0xc2, 0x94, 0x55, 0x00, 0xff, 0xbb, 0x8b, 0xc4, 0xde, 0x85, 0x97,
	0x88, 0x70, 0x42, 0xfc, 0x4a, 0x6e, 0x2a, 0x44, 0x84, 0x4e, 0x1d, 0x89, 0x67, 0x99, 0x4f, 0x2c,
	0x93, 0x42, 0xaf, 0x64, 0x22, 0x0b, 0x8b, 0xb7, 0x9c, 0x8e, 0x87, 0x71, 0x0b, 0xbe, 0x90, 0x76,
	0xd5, 0xe0, 0x75, 0x1c, 0x03, 0x3d, 0xf5, 0x58, 0xf0, 0x48, 0x2a, 0xfb, 0x7b, 0x5c, 0x3f, 0x3e,
	0x32, 0x1e, 0xc7, 0xe3, 0x16, 0x7c, 0xb2, 0x91, 0xcc, 0x74, 0xa6, 0x4c, 0xce, 0xee, 0x9e, 0xb2,
	0xdf, 0x24, 0xa9, 0xd9, 0xd3, 0x9a, 0x6c, 0x1b, 0x86, 0x7d, 0x4b, 0xed, 0x42, 0xe7, 0x88, 0xca,
	0x82, 0xfc, 0x11, 0x24, 0x81, 0xea, 0xe4, 0xd3, 0xfd, 0x7b, 0x89, 0x06, 0x06, 0xf5, 0x80, 0xae,
	0x18, 0xbf, 0xc1, 0x28, 0x96, 0x68, 0x53, 0x72, 0x21, 0x3d, 0x28, 0x97, 0x28, 0x6c, 0x9a, 0x3e,
	0xed, 0x99, 0x25, 0x9e, 0x5a, 0x76, 0x1f, 0x1e, 0x37, 0xb0, 0xdd, 0x2a, 0xd3, 0x97, 0x9f, 0x27,
	0x91, 0x34, 0xdf, 0xb2, 0x75, 0xde, 0xc9, 0xd6, 0x22, 0xd0, 0x98, 0x6d, 0xdc, 0xed, 0xe1, 0xb3,
	0xfc, 0x40, 0xed, 0xa9, 0x45, 0x42, 0xb1, 0xea, 0x59, 0xaf, 0x3d, 0x2b, 0x4f, 0xfe, 0x05, 0x00,
	0x00, 0xff, 0xff, 0xab, 0xa4, 0xcb, 0xbf, 0xed, 0x03, 0x00, 0x00,
}
