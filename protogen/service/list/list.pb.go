// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service/list.proto

package list

import (
	context "context"
	fmt "fmt"
	list "github.com/becosuke/tasks-api/protogen/message/list"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("service/list.proto", fileDescriptor_e1e6696cc18ce1f3) }

var fileDescriptor_e1e6696cc18ce1f3 = []byte{
	// 365 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xc1, 0x4a, 0xf3, 0x40,
	0x10, 0xc7, 0xf9, 0x3e, 0x34, 0xc8, 0xda, 0x52, 0x98, 0x52, 0x28, 0xa9, 0x87, 0x5a, 0xf4, 0x52,
	0x30, 0x8b, 0x16, 0x2f, 0xde, 0x6a, 0x0b, 0x5e, 0x3c, 0x09, 0x82, 0x14, 0x3c, 0xa4, 0xe9, 0x10,
	0x97, 0x6e, 0xb3, 0xb1, 0xb3, 0xa9, 0x07, 0xe9, 0xc5, 0x57, 0xf0, 0xd1, 0x7c, 0x05, 0xc1, 0xd7,
	0x90, 0x6c, 0xb2, 0x98, 0xd8, 0xa6, 0x5e, 0xff, 0xf3, 0xdf, 0xdf, 0x8f, 0x1d, 0x18, 0x06, 0x84,
	0xcb, 0x95, 0x08, 0x90, 0x4b, 0x41, 0xda, 0x8b, 0x97, 0x4a, 0x2b, 0xa8, 0xe5, 0x99, 0x97, 0x66,
	0xee, 0x51, 0xa8, 0x54, 0x28, 0x91, 0xfb, 0xb1, 0xe0, 0x7e, 0x14, 0x29, 0xed, 0x6b, 0xa1, 0x22,
	0xca, 0xba, 0x2e, 0x2c, 0x90, 0xc8, 0x0f, 0x8b, 0xef, 0x2f, 0xbe, 0xf6, 0xd9, 0xde, 0xad, 0x20,
	0x0d, 0x0f, 0xcc, 0x19, 0x2d, 0xd1, 0xd7, 0x08, 0x1d, 0x2f, 0xef, 0x19, 0xa6, 0x97, 0xa5, 0x77,
	0xf8, 0x9c, 0x60, 0x6a, 0xd8, 0x3e, 0xa4, 0x58, 0x45, 0x84, 0xbd, 0xe6, 0xdb, 0xc7, 0xe7, 0xfb,
	0xff, 0x7a, 0xef, 0x80, 0xaf, 0xce, 0x8d, 0xe5, 0xea, 0x5f, 0x1f, 0x1e, 0x99, 0x73, 0x1f, 0xcf,
	0xb6, 0x90, 0xb3, 0xb4, 0x82, 0x6c, 0x87, 0x39, 0xb9, 0x6d, 0xc8, 0xe0, 0xd6, 0x2d, 0x99, 0xbf,
	0x8a, 0xd9, 0x3a, 0xc5, 0x4f, 0x98, 0x33, 0x46, 0x89, 0x9b, 0xf8, 0x2c, 0xad, 0xc0, 0xdb, 0x61,
	0x8e, 0x6f, 0x19, 0x7c, 0xa3, 0x5f, 0xc6, 0x83, 0x60, 0x87, 0x37, 0xa8, 0xc7, 0x2a, 0x48, 0x16,
	0x18, 0x69, 0xe8, 0x96, 0x19, 0x85, 0x91, 0xb5, 0x1c, 0xef, 0x68, 0x94, 0x55, 0xf0, 0x4b, 0xf5,
	0xc2, 0x6a, 0x85, 0x36, 0x41, 0x35, 0x89, 0xac, 0xac, 0xb7, 0xab, 0x92, 0xdb, 0xba, 0xc6, 0xe6,
	0x42, 0xdb, 0xda, 0x88, 0xcf, 0xf2, 0x52, 0xea, 0xa5, 0x35, 0x24, 0xac, 0x51, 0x7c, 0x39, 0x94,
	0x12, 0x4e, 0xaa, 0xc1, 0x43, 0x29, 0xad, 0xfe, 0xf4, 0x8f, 0x56, 0xd5, 0x7f, 0x89, 0xfb, 0x52,
	0x82, 0x32, 0xab, 0x1d, 0xa9, 0x24, 0xd2, 0xa9, 0x72, 0x73, 0xb5, 0x76, 0x54, 0xbd, 0xda, 0x9f,
	0x46, 0xae, 0xea, 0x18, 0x55, 0x0b, 0x9a, 0x25, 0x15, 0x0f, 0xd2, 0xde, 0xf5, 0xe5, 0x64, 0x10,
	0x0a, 0xfd, 0x94, 0x4c, 0xbd, 0x40, 0x2d, 0xf8, 0x14, 0x03, 0x45, 0xc9, 0x1c, 0xb9, 0xf6, 0x69,
	0x4e, 0x67, 0xe9, 0xc1, 0x98, 0x83, 0x08, 0x31, 0xe2, 0xc5, 0x33, 0x9b, 0x3a, 0x26, 0x1e, 0x7c,
	0x07, 0x00, 0x00, 0xff, 0xff, 0x7f, 0xc2, 0xde, 0x51, 0x7d, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ListClient is the client API for List service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ListClient interface {
	Create(ctx context.Context, in *list.CreateRequest, opts ...grpc.CallOption) (*list.CreateResponse, error)
	Update(ctx context.Context, in *list.UpdateRequest, opts ...grpc.CallOption) (*list.UpdateResponse, error)
	Delete(ctx context.Context, in *list.DeleteRequest, opts ...grpc.CallOption) (*list.DeleteResponse, error)
	GetDocument(ctx context.Context, in *list.GetDocumentRequest, opts ...grpc.CallOption) (*list.GetDocumentResponse, error)
	GetDocuments(ctx context.Context, in *list.GetDocumentsRequest, opts ...grpc.CallOption) (*list.GetDocumentsResponse, error)
	GetDocumentsAll(ctx context.Context, in *list.GetDocumentsAllRequest, opts ...grpc.CallOption) (*list.GetDocumentsAllResponse, error)
	GetCountAll(ctx context.Context, in *list.GetCountAllRequest, opts ...grpc.CallOption) (*list.GetCountAllResponse, error)
}

type listClient struct {
	cc *grpc.ClientConn
}

func NewListClient(cc *grpc.ClientConn) ListClient {
	return &listClient{cc}
}

func (c *listClient) Create(ctx context.Context, in *list.CreateRequest, opts ...grpc.CallOption) (*list.CreateResponse, error) {
	out := new(list.CreateResponse)
	err := c.cc.Invoke(ctx, "/service.list.List/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listClient) Update(ctx context.Context, in *list.UpdateRequest, opts ...grpc.CallOption) (*list.UpdateResponse, error) {
	out := new(list.UpdateResponse)
	err := c.cc.Invoke(ctx, "/service.list.List/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listClient) Delete(ctx context.Context, in *list.DeleteRequest, opts ...grpc.CallOption) (*list.DeleteResponse, error) {
	out := new(list.DeleteResponse)
	err := c.cc.Invoke(ctx, "/service.list.List/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listClient) GetDocument(ctx context.Context, in *list.GetDocumentRequest, opts ...grpc.CallOption) (*list.GetDocumentResponse, error) {
	out := new(list.GetDocumentResponse)
	err := c.cc.Invoke(ctx, "/service.list.List/GetDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listClient) GetDocuments(ctx context.Context, in *list.GetDocumentsRequest, opts ...grpc.CallOption) (*list.GetDocumentsResponse, error) {
	out := new(list.GetDocumentsResponse)
	err := c.cc.Invoke(ctx, "/service.list.List/GetDocuments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listClient) GetDocumentsAll(ctx context.Context, in *list.GetDocumentsAllRequest, opts ...grpc.CallOption) (*list.GetDocumentsAllResponse, error) {
	out := new(list.GetDocumentsAllResponse)
	err := c.cc.Invoke(ctx, "/service.list.List/GetDocumentsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listClient) GetCountAll(ctx context.Context, in *list.GetCountAllRequest, opts ...grpc.CallOption) (*list.GetCountAllResponse, error) {
	out := new(list.GetCountAllResponse)
	err := c.cc.Invoke(ctx, "/service.list.List/GetCountAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListServer is the server API for List service.
type ListServer interface {
	Create(context.Context, *list.CreateRequest) (*list.CreateResponse, error)
	Update(context.Context, *list.UpdateRequest) (*list.UpdateResponse, error)
	Delete(context.Context, *list.DeleteRequest) (*list.DeleteResponse, error)
	GetDocument(context.Context, *list.GetDocumentRequest) (*list.GetDocumentResponse, error)
	GetDocuments(context.Context, *list.GetDocumentsRequest) (*list.GetDocumentsResponse, error)
	GetDocumentsAll(context.Context, *list.GetDocumentsAllRequest) (*list.GetDocumentsAllResponse, error)
	GetCountAll(context.Context, *list.GetCountAllRequest) (*list.GetCountAllResponse, error)
}

// UnimplementedListServer can be embedded to have forward compatible implementations.
type UnimplementedListServer struct {
}

func (*UnimplementedListServer) Create(ctx context.Context, req *list.CreateRequest) (*list.CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedListServer) Update(ctx context.Context, req *list.UpdateRequest) (*list.UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedListServer) Delete(ctx context.Context, req *list.DeleteRequest) (*list.DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedListServer) GetDocument(ctx context.Context, req *list.GetDocumentRequest) (*list.GetDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}
func (*UnimplementedListServer) GetDocuments(ctx context.Context, req *list.GetDocumentsRequest) (*list.GetDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocuments not implemented")
}
func (*UnimplementedListServer) GetDocumentsAll(ctx context.Context, req *list.GetDocumentsAllRequest) (*list.GetDocumentsAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentsAll not implemented")
}
func (*UnimplementedListServer) GetCountAll(ctx context.Context, req *list.GetCountAllRequest) (*list.GetCountAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountAll not implemented")
}

func RegisterListServer(s *grpc.Server, srv ListServer) {
	s.RegisterService(&_List_serviceDesc, srv)
}

func _List_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(list.CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.list.List/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServer).Create(ctx, req.(*list.CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _List_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(list.UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.list.List/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServer).Update(ctx, req.(*list.UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _List_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(list.DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.list.List/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServer).Delete(ctx, req.(*list.DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _List_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(list.GetDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.list.List/GetDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServer).GetDocument(ctx, req.(*list.GetDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _List_GetDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(list.GetDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServer).GetDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.list.List/GetDocuments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServer).GetDocuments(ctx, req.(*list.GetDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _List_GetDocumentsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(list.GetDocumentsAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServer).GetDocumentsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.list.List/GetDocumentsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServer).GetDocumentsAll(ctx, req.(*list.GetDocumentsAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _List_GetCountAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(list.GetCountAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServer).GetCountAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.list.List/GetCountAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServer).GetCountAll(ctx, req.(*list.GetCountAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _List_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.list.List",
	HandlerType: (*ListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _List_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _List_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _List_Delete_Handler,
		},
		{
			MethodName: "GetDocument",
			Handler:    _List_GetDocument_Handler,
		},
		{
			MethodName: "GetDocuments",
			Handler:    _List_GetDocuments_Handler,
		},
		{
			MethodName: "GetDocumentsAll",
			Handler:    _List_GetDocumentsAll_Handler,
		},
		{
			MethodName: "GetCountAll",
			Handler:    _List_GetCountAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/list.proto",
}
