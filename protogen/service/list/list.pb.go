// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service/list.proto

package list // import "github.com/becosuke/tasks-api/protogen/service/list"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/becosuke/tasks-api/protogen/message/common"
import list "github.com/becosuke/tasks-api/protogen/message/list"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ListClient is the client API for List service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ListClient interface {
	GetDocument(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*list.Document, error)
	GetDocuments(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (List_GetDocumentsClient, error)
	GetDocumentsAll(ctx context.Context, in *common.Pagination, opts ...grpc.CallOption) (List_GetDocumentsAllClient, error)
	GetCountAll(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*common.Count, error)
	Create(ctx context.Context, in *list.CreateRequest, opts ...grpc.CallOption) (*list.Document, error)
	Update(ctx context.Context, in *list.UpdateRequest, opts ...grpc.CallOption) (*list.Document, error)
	Delete(ctx context.Context, in *list.DeleteRequest, opts ...grpc.CallOption) (*list.Document, error)
}

type listClient struct {
	cc *grpc.ClientConn
}

func NewListClient(cc *grpc.ClientConn) ListClient {
	return &listClient{cc}
}

func (c *listClient) GetDocument(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*list.Document, error) {
	out := new(list.Document)
	err := c.cc.Invoke(ctx, "/service.list.List/GetDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listClient) GetDocuments(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (List_GetDocumentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_List_serviceDesc.Streams[0], "/service.list.List/GetDocuments", opts...)
	if err != nil {
		return nil, err
	}
	x := &listGetDocumentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type List_GetDocumentsClient interface {
	Recv() (*list.Document, error)
	grpc.ClientStream
}

type listGetDocumentsClient struct {
	grpc.ClientStream
}

func (x *listGetDocumentsClient) Recv() (*list.Document, error) {
	m := new(list.Document)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *listClient) GetDocumentsAll(ctx context.Context, in *common.Pagination, opts ...grpc.CallOption) (List_GetDocumentsAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &_List_serviceDesc.Streams[1], "/service.list.List/GetDocumentsAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &listGetDocumentsAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type List_GetDocumentsAllClient interface {
	Recv() (*list.Document, error)
	grpc.ClientStream
}

type listGetDocumentsAllClient struct {
	grpc.ClientStream
}

func (x *listGetDocumentsAllClient) Recv() (*list.Document, error) {
	m := new(list.Document)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *listClient) GetCountAll(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*common.Count, error) {
	out := new(common.Count)
	err := c.cc.Invoke(ctx, "/service.list.List/GetCountAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listClient) Create(ctx context.Context, in *list.CreateRequest, opts ...grpc.CallOption) (*list.Document, error) {
	out := new(list.Document)
	err := c.cc.Invoke(ctx, "/service.list.List/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listClient) Update(ctx context.Context, in *list.UpdateRequest, opts ...grpc.CallOption) (*list.Document, error) {
	out := new(list.Document)
	err := c.cc.Invoke(ctx, "/service.list.List/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listClient) Delete(ctx context.Context, in *list.DeleteRequest, opts ...grpc.CallOption) (*list.Document, error) {
	out := new(list.Document)
	err := c.cc.Invoke(ctx, "/service.list.List/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListServer is the server API for List service.
type ListServer interface {
	GetDocument(context.Context, *common.Id) (*list.Document, error)
	GetDocuments(*common.Ids, List_GetDocumentsServer) error
	GetDocumentsAll(*common.Pagination, List_GetDocumentsAllServer) error
	GetCountAll(context.Context, *common.Empty) (*common.Count, error)
	Create(context.Context, *list.CreateRequest) (*list.Document, error)
	Update(context.Context, *list.UpdateRequest) (*list.Document, error)
	Delete(context.Context, *list.DeleteRequest) (*list.Document, error)
}

func RegisterListServer(s *grpc.Server, srv ListServer) {
	s.RegisterService(&_List_serviceDesc, srv)
}

func _List_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.list.List/GetDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServer).GetDocument(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _List_GetDocuments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(common.Ids)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ListServer).GetDocuments(m, &listGetDocumentsServer{stream})
}

type List_GetDocumentsServer interface {
	Send(*list.Document) error
	grpc.ServerStream
}

type listGetDocumentsServer struct {
	grpc.ServerStream
}

func (x *listGetDocumentsServer) Send(m *list.Document) error {
	return x.ServerStream.SendMsg(m)
}

func _List_GetDocumentsAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(common.Pagination)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ListServer).GetDocumentsAll(m, &listGetDocumentsAllServer{stream})
}

type List_GetDocumentsAllServer interface {
	Send(*list.Document) error
	grpc.ServerStream
}

type listGetDocumentsAllServer struct {
	grpc.ServerStream
}

func (x *listGetDocumentsAllServer) Send(m *list.Document) error {
	return x.ServerStream.SendMsg(m)
}

func _List_GetCountAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServer).GetCountAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.list.List/GetCountAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServer).GetCountAll(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _List_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(list.CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.list.List/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServer).Create(ctx, req.(*list.CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _List_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(list.UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.list.List/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServer).Update(ctx, req.(*list.UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _List_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(list.DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.list.List/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServer).Delete(ctx, req.(*list.DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _List_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.list.List",
	HandlerType: (*ListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDocument",
			Handler:    _List_GetDocument_Handler,
		},
		{
			MethodName: "GetCountAll",
			Handler:    _List_GetCountAll_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _List_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _List_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _List_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDocuments",
			Handler:       _List_GetDocuments_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDocumentsAll",
			Handler:       _List_GetDocumentsAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service/list.proto",
}

func init() { proto.RegisterFile("service/list.proto", fileDescriptor_list_54cb54791df1d261) }

var fileDescriptor_list_54cb54791df1d261 = []byte{
	// 374 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0xd3, 0x41, 0x4b, 0xe3, 0x40,
	0x14, 0x07, 0x70, 0xba, 0x94, 0xb0, 0xcc, 0xb6, 0x14, 0x5e, 0xb7, 0x4b, 0x99, 0xee, 0x61, 0xe9,
	0xb1, 0xb0, 0x99, 0xee, 0x96, 0xbd, 0xec, 0x4d, 0x5b, 0x11, 0xc1, 0x43, 0x29, 0x8a, 0xe2, 0x41,
	0x99, 0x26, 0x43, 0x1c, 0x9a, 0xcc, 0xc4, 0xbe, 0x49, 0x41, 0xa4, 0x17, 0xbf, 0x82, 0x1f, 0xcd,
	0xaf, 0xe0, 0x67, 0xf0, 0x2c, 0x99, 0x24, 0x92, 0xb4, 0x96, 0x7a, 0xfd, 0xcf, 0x9b, 0xdf, 0x7b,
	0xbc, 0x4c, 0x08, 0xa0, 0x58, 0xae, 0xa4, 0x27, 0x58, 0x28, 0xd1, 0xb8, 0xf1, 0x52, 0x1b, 0x0d,
	0x8d, 0x3c, 0x73, 0xd3, 0x8c, 0xfe, 0x0c, 0xb4, 0x0e, 0x42, 0xc1, 0x78, 0x2c, 0x19, 0x57, 0x4a,
	0x1b, 0x6e, 0xa4, 0x56, 0x98, 0xd5, 0x52, 0x88, 0x04, 0x22, 0x0f, 0xca, 0xf7, 0xe9, 0xf7, 0x22,
	0xf3, 0x74, 0x14, 0x69, 0x95, 0xa5, 0x7f, 0x5f, 0xeb, 0xa4, 0x7e, 0x2a, 0xd1, 0xc0, 0x94, 0x7c,
	0x3b, 0x16, 0x66, 0xa2, 0xbd, 0x24, 0x12, 0xca, 0x00, 0xb8, 0x79, 0xb9, 0x9b, 0x97, 0x9f, 0xf8,
	0xf4, 0xc7, 0x7b, 0x66, 0xd9, 0xa2, 0xb6, 0xdf, 0x79, 0x7c, 0x7e, 0x79, 0xfa, 0xd2, 0x82, 0x26,
	0x5b, 0xfd, 0xb1, 0x1d, 0xd9, 0x83, 0xf4, 0xd7, 0x70, 0x43, 0x1a, 0x25, 0x11, 0xa1, 0xbd, 0x4d,
	0xe2, 0x4e, 0xf3, 0x97, 0x35, 0x29, 0x74, 0x0b, 0x13, 0x99, 0x9f, 0x9f, 0xa5, 0x3a, 0xae, 0x87,
	0x35, 0xb8, 0x26, 0xad, 0x72, 0x83, 0x83, 0x30, 0x04, 0xba, 0xd9, 0x63, 0xca, 0x03, 0xa9, 0xec,
	0x6e, 0x3e, 0x3f, 0x3e, 0x32, 0x1e, 0x86, 0xc3, 0x1a, 0x5c, 0xda, 0x95, 0x8c, 0x75, 0xa2, 0x4c,
	0x6a, 0x77, 0x36, 0xed, 0xa3, 0x28, 0x36, 0xf7, 0x74, 0x2b, 0xb6, 0x17, 0xfa, 0x3d, 0xab, 0x76,
	0xa0, 0x5d, 0x51, 0x99, 0x97, 0x1e, 0xc2, 0x8c, 0x38, 0xe3, 0xa5, 0xe0, 0x46, 0x40, 0xaf, 0x3a,
	0x54, 0x96, 0xce, 0xc4, 0x5d, 0x22, 0xd0, 0xec, 0x9c, 0xb8, 0x6d, 0xed, 0x66, 0xff, 0x6b, 0x61,
	0xff, 0xaf, 0x0d, 0xe0, 0x82, 0x38, 0xe7, 0xb1, 0xff, 0x81, 0x99, 0xa5, 0xfb, 0xcc, 0xae, 0x35,
	0x81, 0x56, 0x3f, 0x62, 0x0a, 0x9f, 0x11, 0x67, 0x22, 0x42, 0xb1, 0x0d, 0x67, 0xe9, 0x3e, 0x38,
	0x5f, 0xef, 0xa0, 0x0a, 0x1f, 0xfe, 0xbb, 0x1a, 0x05, 0xd2, 0xdc, 0x26, 0xf3, 0x74, 0x6d, 0x6c,
	0x2e, 0x3c, 0x8d, 0xc9, 0x42, 0x30, 0xc3, 0x71, 0x81, 0xbf, 0xd3, 0x57, 0x6d, 0xdf, 0x67, 0x20,
	0x14, 0x2b, 0xff, 0x0b, 0x73, 0xc7, 0xc6, 0xa3, 0xb7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x71, 0xd8,
	0x50, 0x1f, 0x22, 0x03, 0x00, 0x00,
}
